//----------------------
// <auto-generated>
// </auto-generated>
//----------------------







export class Person {
    XX_FirstName!: string | undefined;
    XX_LastName!: string | undefined;


    init(_data?: any) {
        if (_data) {
            this.XX_FirstName = _data["FirstName"];
            this.XX_LastName = _data["LastName"];
        }
    }

    static fromJS(data: any): Person {
        data = typeof data === 'object' ? data : {};
        let result = new Person();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["FirstName"] = this.XX_FirstName;
        data["LastName"] = this.XX_LastName;
        return data;
    }
}

export class Student extends Person {
    XX_Study!: string | undefined;


    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.XX_Study = _data["Study"];
        }
    }

    static fromJS(data: any): Student {
        data = typeof data === 'object' ? data : {};
        let result = new Student();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Study"] = this.XX_Study;
        super.toJSON(data);
        return data;
    }
}

export class MyClass {
    XX_Name!: string | undefined;
    XX_DateOfBirth!: Date;
    XX_PrimitiveArray!: number[] | undefined;
    XX_PrimitiveDictionary!: { [key: string]: number; } | undefined;
    XX_DateArray!: Date[] | undefined;
    XX_DateDictionary!: { [key: string]: Date; } | undefined;
    XX_Reference!: Student | undefined;
    XX_Array!: Student[] | undefined;
    XX_Dictionary!: { [key: string]: Student; } | undefined;


    init(_data?: any) {
        if (_data) {
            this.XX_Name = _data["Name"] !== undefined ? _data["Name"] : "foo";
            this.XX_DateOfBirth = _data["DateOfBirth"] ? new Date(_data["DateOfBirth"].toString()) : undefined as any;
            if (Array.isArray(_data["PrimitiveArray"])) {
                this.XX_PrimitiveArray = [] as any;
                for (let item of _data["PrimitiveArray"])
                    this.XX_PrimitiveArray!.push(item);
            }
            if (_data["PrimitiveDictionary"]) {
                this.XX_PrimitiveDictionary = {} as any;
                for (let key in _data["PrimitiveDictionary"]) {
                    if (_data["PrimitiveDictionary"].hasOwnProperty(key))
                        (this.XX_PrimitiveDictionary as any)![key] = _data["PrimitiveDictionary"][key];
                }
            }
            if (Array.isArray(_data["DateArray"])) {
                this.XX_DateArray = [] as any;
                for (let item of _data["DateArray"])
                    this.XX_DateArray!.push(new Date(item));
            }
            if (_data["DateDictionary"]) {
                this.XX_DateDictionary = {} as any;
                for (let key in _data["DateDictionary"]) {
                    if (_data["DateDictionary"].hasOwnProperty(key))
                        (this.XX_DateDictionary as any)![key] = _data["DateDictionary"][key] ? new Date(_data["DateDictionary"][key].toString()) : undefined as any;
                }
            }
            this.XX_Reference = _data["Reference"] ? Student.fromJS(_data["Reference"]) : undefined as any;
            if (Array.isArray(_data["Array"])) {
                this.XX_Array = [] as any;
                for (let item of _data["Array"])
                    this.XX_Array!.push(Student.fromJS(item));
            }
            if (_data["Dictionary"]) {
                this.XX_Dictionary = {} as any;
                for (let key in _data["Dictionary"]) {
                    if (_data["Dictionary"].hasOwnProperty(key))
                        (this.XX_Dictionary as any)![key] = _data["Dictionary"][key] ? Student.fromJS(_data["Dictionary"][key]) : new Student();
                }
            }
        }
    }

    static fromJS(data: any): MyClass {
        data = typeof data === 'object' ? data : {};
        let result = new MyClass();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Name"] = this.XX_Name;
        data["DateOfBirth"] = this.XX_DateOfBirth ? this.XX_DateOfBirth.toISOString() : undefined as any;
        if (Array.isArray(this.XX_PrimitiveArray)) {
            data["PrimitiveArray"] = [];
            for (let item of this.XX_PrimitiveArray)
                data["PrimitiveArray"].push(item);
        }
        if (this.XX_PrimitiveDictionary) {
            data["PrimitiveDictionary"] = {};
            for (let key in this.XX_PrimitiveDictionary) {
                if (this.XX_PrimitiveDictionary.hasOwnProperty(key))
                    (data["PrimitiveDictionary"] as any)[key] = (this.XX_PrimitiveDictionary as any)[key];
            }
        }
        if (Array.isArray(this.XX_DateArray)) {
            data["DateArray"] = [];
            for (let item of this.XX_DateArray)
                data["DateArray"].push(item.toISOString());
        }
        if (this.XX_DateDictionary) {
            data["DateDictionary"] = {};
            for (let key in this.XX_DateDictionary) {
                if (this.XX_DateDictionary.hasOwnProperty(key))
                    (data["DateDictionary"] as any)[key] = this.XX_DateDictionary[key] ? this.XX_DateDictionary[key].toISOString() : undefined as any;
            }
        }
        data["Reference"] = this.XX_Reference ? this.XX_Reference.toJSON() : undefined as any;
        if (Array.isArray(this.XX_Array)) {
            data["Array"] = [];
            for (let item of this.XX_Array)
                data["Array"].push(item ? item.toJSON() : undefined as any);
        }
        if (this.XX_Dictionary) {
            data["Dictionary"] = {};
            for (let key in this.XX_Dictionary) {
                if (this.XX_Dictionary.hasOwnProperty(key))
                    (data["Dictionary"] as any)[key] = this.XX_Dictionary[key] ? this.XX_Dictionary[key].toJSON() : undefined as any;
            }
        }
        return data;
    }
}