//----------------------
// <auto-generated>
// </auto-generated>
//----------------------







export class MetadataDictionary implements IMetadataDictionary {
    foo!: string;

    [key: string]: any;

    constructor(data?: IMetadataDictionary) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.foo = _data["Foo"];
        }
    }

    static fromJS(data: any): MetadataDictionary {
        data = typeof data === 'object' ? data : {};
        let result = new MetadataDictionary();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["Foo"] = this.foo;
        return data;
    }
}

export interface IMetadataDictionary {
    foo: string;

    [key: string]: any;
}